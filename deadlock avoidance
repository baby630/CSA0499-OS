#include <stdio.h>

#define P 5 // Number of processes
#define R 3 // Number of resources

// Function to check if the current allocation is safe
int isSafe(int processes[], int avail[], int max[][R], int allot[][R]) {
    int need[P][R];

    // Calculate need matrix
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++) {
            need[i][j] = max[i][j] - allot[i][j];
        }
    }

    // Initialize finish to false
    int finish[P] = {0};

    // Initialize a vector to store the safe sequence
    int safeSeq[P];
    int count = 0;

    // While all processes are not finished
    while (count < P) {
        // Find a process which is not finished and whose needs can be satisfied with available resources
        int found = 0;
        for (int i = 0; i < P; i++) {
            // Check if the process is not finished and its needs can be satisfied
            if (!finish[i]) {
                int j;
                for (j = 0; j < R; j++) {
                    if (need[i][j] > avail[j]) {
                        break;
                    }
                }
                // If all needs can be satisfied
                if (j == R) {
                    for (int k = 0; k < R; k++) {
                        avail[k] += allot[i][k];
                    }
                    safeSeq[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        // If no process can be found, the system is in deadlock
        if (!found) {
            printf("System is in deadlock\n");
            return 0;
        }
    }

    // If a safe sequence is found, print it
    printf("System is not in deadlock. Safe sequence is: ");
    for (int i = 0; i < P; i++) {
        printf("%d ", safeSeq[i]);
    }
    printf("\n");
    return 1;
}

int main() {
    int processes[P];
    int available[R];
    int max[P][R];
    int allot[P][R];

    printf("Enter available resources: ");
    for (int i = 0; i < R; i++) {
        scanf("%d", &available[i]);
    }

    printf("Enter maximum resources for each process:\n");
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    printf("Enter allocated resources for each process:\n");
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++) {
            scanf("%d", &allot[i][j]);
        }
    }

    if (isSafe(processes, available, max, allot)) {
        printf("Resources can be granted safely.\n");
    } else {
        printf("Resources cannot be granted safely.\n");
    }

    return 0;
}
