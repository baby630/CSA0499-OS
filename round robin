#include <stdio.h>

// Function to implement Round Robin scheduling algorithm
void round_robin(int processes[], int n, int burst_time[], int quantum_time) {
    int remaining_time[n]; // Remaining burst time for each process
    int total_waiting_time = 0; // Total waiting time for all processes
    int total_turnaround_time = 0; // Total turnaround time for all processes

    // Initialize remaining_time to burst_time
    for (int i = 0; i < n; i++) {
        remaining_time[i] = burst_time[i];
    }

    // Run the scheduler
    int current_time = 0; // Current time
    while (1) {
        int done = 1; // Flag to indicate if all processes are done
        for (int i = 0; i < n; i++) {
            // If this process has remaining burst time, process it
            if (remaining_time[i] > 0) {
                done = 0; // At least one process is not done

                // Process the quantum or the remaining burst time, whichever is smaller
                if (remaining_time[i] <= quantum_time) {
                    current_time += remaining_time[i]; // Increment current time by remaining burst time
                    remaining_time[i] = 0; // Set remaining burst time to 0
                    total_waiting_time += current_time - burst_time[i]; // Update waiting time
                    total_turnaround_time += current_time; // Update turnaround time
                } else {
                    current_time += quantum_time; // Increment current time by quantum time
                    remaining_time[i] -= quantum_time; // Decrement remaining burst time
                    total_waiting_time += current_time - burst_time[i]; // Update waiting time
                }
            }
        }

        // If all processes are done, break out of the loop
        if (done == 1) {
            break;
        }
    }

    // Calculate average waiting time and average turnaround time
    float avg_waiting_time = (float)total_waiting_time / n;
    float avg_turnaround_time = (float)total_turnaround_time / n;

    // Print results
    printf("Average waiting time = %.2f\n", avg_waiting_time);
    printf("Average turnaround time = %.2f\n", avg_turnaround_time);
}

int main() {
    int n; // Number of processes
    int quantum_time; // Time quantum for Round Robin scheduling
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int burst_time[n]; // Burst times for processes
    int processes[n]; // Process IDs

    // Input burst times
    printf("Enter burst times for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Burst time for process %d: ", i + 1);
        scanf("%d", &burst_time[i]);
        processes[i] = i + 1; // Assign process IDs
    }

    // Input time quantum
    printf("Enter time quantum: ");
    scanf("%d", &quantum_time);

    // Run Round Robin scheduling
    round_robin(processes, n, burst_time, quantum_time);

    return 0;
}
